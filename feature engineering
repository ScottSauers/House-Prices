import pandas as pd
import numpy as np
from sklearn.impute import KNNImputer
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler

# Ordinal Encoding
ordinal_features = {
    'ExterQual': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1},
    'ExterCond': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1},
    'BsmtQual': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0},
    'BsmtCond': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0},
    'BsmtExposure': {'Gd': 4, 'Av': 3, 'Mn': 2, 'No': 1, 'NA': 0},
    'BsmtFinType1': {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0},
    'BsmtFinType2': {'GLQ': 6, 'ALQ': 5, 'BLQ': 4, 'Rec': 3, 'LwQ': 2, 'Unf': 1, 'NA': 0},
    'HeatingQC': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1},
    'KitchenQual': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1},
    'Functional': {'Typ': 8, 'Min1': 7, 'Min2': 6, 'Mod': 5, 'Maj1': 4, 'Maj2': 3, 'Sev': 2, 'Sal': 1},
    'FireplaceQu': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0},
    'GarageFinish': {'Fin': 3, 'RFn': 2, 'Unf': 1, 'NA': 0},
    'GarageQual': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0},
    'GarageCond': {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'NA': 0},
    'PavedDrive': {'Y': 3, 'P': 2, 'N': 1},
    'PoolQC': {'Ex': 4, 'Gd': 3, 'TA': 2, 'Fa': 1, 'NA': 0},
    'Fence': {'GdPrv': 4, 'MnPrv': 3, 'GdWo': 2, 'MnWw': 1, 'NA': 0}
}


# Load datasets
train_df = pd.read_csv('/Users/scott/Downloads/house-prices/train.csv', na_values='NA', keep_default_na=False)
test_df = pd.read_csv('/Users/scott/Downloads/house-prices/test.csv', na_values='NA', keep_default_na=False)

# Separate SalePrice and keep it in a different DataFrame
sale_price_train = train_df['SalePrice']
train_df.drop('SalePrice', axis=1, inplace=True)

# Concatenate train and test DataFrames
combined_df = pd.concat([train_df, test_df], sort=False, ignore_index=True)

# Replace ordinal features with their ordinal values
combined_df.replace(ordinal_features, inplace=True)

# Explicitly replace "NA" with 0, except for SalePrice
for column in combined_df.columns:
    combined_df[column] = combined_df[column].apply(lambda x: 0 if x == "NA" else x)

combined_df.fillna(0, inplace=True)

# Add back SalePrice to train set
combined_df.loc[combined_df['Id'] <= max(train_df['Id']), 'SalePrice'] = sale_price_train

# Create new features
combined_df['TotalSF'] = combined_df['TotalBsmtSF'] + combined_df['1stFlrSF'] + combined_df['2ndFlrSF']
combined_df['AgeOfHouse'] = combined_df['YrSold'] - combined_df['YearBuilt']
combined_df['TotalBathrooms'] = combined_df['BsmtFullBath'] + (0.5 * combined_df['BsmtHalfBath']) + combined_df['FullBath'] + (0.5 * combined_df['HalfBath'])

# One-hot encode remaining categorical columns
combined_df = pd.get_dummies(combined_df, columns=combined_df.select_dtypes(include=['object']).columns.tolist(), drop_first=True)

# Create AgeBand for 'AgeOfHouse' and SizeBand for 'TotalSF'
combined_df['AgeBand'] = pd.cut(combined_df['AgeOfHouse'], 5, labels=False)
combined_df['SizeBand'] = pd.qcut(combined_df['TotalSF'], 5, labels=False)

# Convert boolean columns to int
combined_df = combined_df.astype({col: 'int' for col in combined_df.columns if combined_df[col].dtype == 'bool'})

# Feature Scaling
scaler = StandardScaler()
columns_to_scale = [col for col in combined_df.columns if combined_df[col].dtype == 'float64' or combined_df[col].dtype == 'int64']
columns_to_scale.remove('Id')
columns_to_scale.remove('SalePrice')  # Removing SalePrice from feature scaling
combined_df[columns_to_scale] = scaler.fit_transform(combined_df[columns_to_scale])

# Split combined DataFrame back into separate train and test DataFrames based on 'Id'
train_df = combined_df.loc[combined_df['Id'] <= max(train_df['Id'])]
test_df = combined_df.loc[combined_df['Id'] > max(train_df['Id'])]

# Save to CSV files
train_df.to_csv('/Users/scott/Downloads/house-prices/house_train_engineered.csv', index=False)
test_df.to_csv('/Users/scott/Downloads/house-prices/house_test_engineered.csv', index=False)
